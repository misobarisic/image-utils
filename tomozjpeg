#!/bin/sh

function ProgressBar {
	# Process data
	progress=$(($1 * 100 / $2 * 100))
	progress=$((${progress}/100))
	done=(${progress} * 4)/10

	printf "\r${progress}%% ${1}:$((${2}-${1})) ${3}"
}

quality=95
output_path=""
input_path=""
extension=""
jobs=0

if ! command -v convert >/dev/null; then
	printf >&2 "'convert' not present. Make sure to install the ImageMagick suite.\n"
	exit 1
fi

if ! command -v mozcjpeg >/dev/null; then
	printf >&2 "'mozcjpeg' not present. Make sure to install it.\n"
	exit 1
fi

# Parse arguments
while :; do
	case $1 in
	-q | --quality)
		if [ ! -n "$2" ]; then
			printf >&2 "You must provide a value after -q/--quality\n"
			exit 1
		fi
		[ -n "$2" ] && [ "$2" -eq "$2" ] 2>/dev/null
		if [ $? -ne 0 ]; then
			printf >&2 "%s must be a valid integer. Got %s\n" "-q/--quality" "$2"
			exit 1
		fi
		[ "$2" -gt 100 ] || [ "$2" -lt 0 ] && printf >&2 "%s must be an integer between 0 and 100. Got %s\n" "-q/--quality" "$2" && exit 1
		quality="$2"
		shift
		shift
		;;
	--ext | --extension)
		if [ -n "$2" ]; then
			extension=".$2"
		else
			printf >&2 "You must provide a value after --ext/--extension\n"
			exit 1
		fi
		shift
		shift
		;;
	-o | --output)
		if [ -n "$2" ]; then
			output_path="$2"
		else
			printf >&2 "You must provide a value after -o/--output\n"
			exit 1
		fi
		shift
		shift
		;;
	-i | --input)
		if [ -n "$2" ]; then
			input_path="$2"
		else
			printf >&2 "You must provide a value after -i/--input\n"
			exit 1
		fi
		shift
		shift
		;;
	-j | --jobs)
		if [ ! -n "$2" ]; then
			printf >&2 "You must provide a value after -j/--jobs\n"
			exit 1
		fi
		[ -n "$2" ] && [ "$2" -eq "$2" ] 2>/dev/null
		if [ $? -ne 0 ]; then
			printf >&2 "%s must be a valid integer. Got %s\n" "-j/--jobs" "$2"
			exit 1
		fi
		if [ "$2" -lt 0 ]; then
			printf >&2 "%s must be a non negative integer. Got %s\n" "-j/--jobs" "$2"
			exit 1
		fi
		if [ -n "$2" ]; then
			jobs="$2"
		fi
		shift
		shift
		;;
	*) 
		break
		;;
	esac
done

[ -z "${input_path}" ] && printf >&2 "%s must be specified\n" "-i/--input" && exit 1
[ -z "${output_path}" ] && printf >&2 "%s must be specified\n" "-o/--output" && exit 1

if [ -f "${input_path}" ]; then
	# output_path=$(realpath -s $output_path)
	if [ -d "${output_path}" ]; then
		printf >&2 "%s must be a file, not a directory when input is a file. Got %s\n" "-o/--output" "${output_path}"
		exit 1
	fi
	output_dir=$(dirname ${output_path})
	if [ ! -e ${output_dir} ]; then
		printf "Creating parent directories before writing to the output file\n"
		mkdir -p ${output_dir}
	fi

	convert "${input_path}" pnm:- | mozcjpeg -quality ${quality} >"${output_path}"
fi

if [ -d "${input_path}" ]; then
	if [ ! -e "${output_path}" ] && [ ! -f "${output_path}" ]; then
		printf "Creating output directories before writing to the output files\n"
		mkdir -p ${output_path}
	fi

	if [ -d "${output_path}" ]; then

		if command -v parallel >/dev/null && [ "${jobs}" -ne 1 ]; then
			cmd="[ -f {} ] && convert {} pnm:- | mozcjpeg -quality ${quality} -outfile ${output_path}/{/.}.jpg"

			if [ "${jobs}" -eq 0 ]; then
				parallel --bar "${cmd}" ::: "${input_path}"/*"${extension}"*
			else
				parallel --bar --jobs ${jobs} "${cmd}" ::: "${input_path}"/*"${extension}"*
			fi
			
			exit
		fi

		end=0
		for file in ${input_path}/*${extension}; do
			if [ -f "${file}" ]; then
				end=$((end + 1))
			fi
		done

		count=0
		for file in ${input_path}/*${extension}; do
			if [ -f "${file}" ]; then
				count=$((count + 1))
				ProgressBar ${count} ${end} "${file}"
				filename=$(basename "${file%.*}")
				convert "${file}" pnm:- | mozcjpeg -quality ${quality} >"${output_path}/${filename}.jpg"
			fi
		done
	else
		printf >&2 "%s must be a directory, not a file when input is a directory. Got %s\n" "-o/--output" "${output_path}"
		exit 1
	fi

fi
