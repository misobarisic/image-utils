#!/bin/sh

ProgressBar() {
	progress=$(($1 * 100 / $2))
	printf "\r${progress}%% ${1}:$((${2} - ${1})) ${3}"
}

quality=95
effort=7
brotli_effort=9
output_path=""
input_path=""
extension=""
jobs=0

if ! command -v cjxl > /dev/null; then
	printf >&2 "'cjxl' not present. Make sure to install libjxl.\n"
	exit 1
fi

# Parse arguments
while :; do
	case $1 in
		-q | --quality)
			if [ -z "$2" ]; then
				printf >&2 "You must provide a value after -q/--quality\n"
				exit 1
			fi
			if ! eval "[ -n \"$2\" ] && [ \"$2\" -eq \"$2\" ] 2> /dev/null"; then
				printf >&2 "%s must be a valid integer. Got %s\n" "-q/--quality" "$2"
				exit 1
			fi
			[ "$2" -gt 100 ] || [ "$2" -lt 0 ] && printf >&2 "%s must be an integer between 0 and 100. Got %s\n" "-q/--quality" "$2" && exit 1
			quality="$2"
			shift
			shift
			;;
		--ext | --extension)
			if [ -n "$2" ]; then
				extension=".$2"
			else
				printf >&2 "You must provide a value after --ext/--extension\n"
				exit 1
			fi
			shift
			shift
			;;
		-b | --brotli_effort)
			if [ -z "$2" ]; then
				printf >&2 "You must provide a value after -b/--brotli_effort\n"
				exit 1
			fi
			if ! eval "[ -n \"$2\" ] && [ \"$2\" -eq \"$2\" ] 2> /dev/null"; then
				printf >&2 "%s must be a valid integer. Got %s\n" "-q/--quality" "$2"
				exit 1
			fi
			[ "$2" -gt 11 ] || [ "$2" -lt 0 ] && printf >&2 "%s must be an integer between 0 and 100. Got %s\n" "-b/--brotli_effort" "$2" && exit 1
			brotli_effort="$2"
			shift
			shift
			;;
		-e | --effort)
			if [ -z "$2" ]; then
				printf >&2 "You must provide a value after -e/--effort\n"
				exit 1
			fi
			if ! eval "[ -n \"$2\" ] && [ \"$2\" -eq \"$2\" ] 2> /dev/null"; then
				printf >&2 "%s must be a valid integer. Got %s\n" "-e/--effort" "$2"
				exit 1
			fi
			[ "$2" -gt 9 ] || [ "$2" -lt 1 ] && printf >&2 "%s must be an integer between 0 and 100. Got %s\n" "-e/--effort" "$2" && exit 1
			effort="$2"
			shift
			shift
			;;
		-o | --output)
			if [ -n "$2" ]; then
				output_path="$2"
			else
				printf >&2 "You must provide a value after -o/--output\n"
				exit 1
			fi
			shift
			shift
			;;
		-i | --input)
			if [ -n "$2" ]; then
				input_path="$2"
			else
				printf >&2 "You must provide a value after -i/--input\n"
				exit 1
			fi
			shift
			shift
			;;
		-j | --jobs)
			if [ -z "$2" ]; then
				printf >&2 "You must provide a value after -j/--jobs\n"
				exit 1
			fi
			if ! eval "[ -n \"$2\" ] && [ \"$2\" -eq \"$2\" ] 2> /dev/null"; then
				printf >&2 "%s must be a valid integer. Got %s\n" "-j/--jobs" "$2"
				exit 1
			fi
			if [ "$2" -lt 0 ]; then
				printf >&2 "%s must be a non negative integer. Got %s\n" "-j/--jobs" "$2"
				exit 1
			fi
			if [ -n "$2" ]; then
				jobs="$2"
			fi
			shift
			shift
			;;
		*)
			break
			;;
	esac
done

[ -z "${input_path}" ] && printf >&2 "%s must be specified\n" "-i/--input" && exit 1
[ -z "${output_path}" ] && printf >&2 "%s must be specified\n" "-o/--output" && exit 1

if [ -f "${input_path}" ]; then
	# output_path=$(realpath -s $output_path)
	if [ -d "${output_path}" ]; then
		printf >&2 "%s must be a file, not a directory when input is a file. Got %s\n" "-o/--output" "${output_path}"
		exit 1
	fi
	output_dir=$(dirname "${output_path}")
	if [ ! -e "${output_dir}" ]; then
		printf "Creating parent directories before writing to the output file\n"
		mkdir -p "${output_dir}"
	fi

	convert "${input_path}" pnm:- | mozcjpeg -quality "${quality}" > "${output_path}"
	cjxl "${input_path}" "${output_path}" -q "${quality}" -e "${effort}" --brotli_effort="${brotli_effort}"
fi

if [ -d "${input_path}" ]; then
	if [ ! -e "${output_path}" ] && [ ! -f "${output_path}" ]; then
		printf "Creating output directories before writing to the output files\n"
		mkdir -p "${output_path}"
	fi

	if [ -d "${output_path}" ]; then

		if command -v parallel > /dev/null && [ "${jobs}" -ne 1 ]; then
			# shellcheck disable=SC2089
			cmd="cjxl -q \"${quality}\" --effort=\"${effort}\" --brotli_effort=\"${brotli_effort}\" {} ${output_path}/{/.}.jxl 2> /dev/null"

			if [ "${jobs}" -eq 0 ]; then
				# shellcheck disable=SC2086,SC2090
				parallel --bar ${cmd} ::: "${input_path}"/*"${extension}"*
			else
				# shellcheck disable=SC2086,SC2090
				parallel --bar --jobs "${jobs}" ${cmd} ::: "${input_path}"/*"${extension}"*
			fi

			exit
		fi

		end=0
		for file in "${input_path}"/*"${extension}"; do
			if [ -f "${file}" ]; then
				end=$((end + 1))
			fi
		done

		count=0
		for file in "${input_path}"/*"${extension}"; do
			if [ -f "${file}" ]; then
				count=$((count + 1))
				ProgressBar "${count}" "${end}" "${file}"
				filename=$(basename "${file%.*}")
				cjxl -q "${quality}" --effort="${effort}" --brotli_effort="${brotli_effort}" "${file}" "${output_path}/${filename}.jxl" 2> /dev/null
			fi
		done
	else
		printf >&2 "%s must be a directory, not a file when input is a directory. Got %s\n" "-o/--output" "${output_path}"
		exit 1
	fi

fi
